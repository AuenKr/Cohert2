import express, { response } from 'express';
import cors from 'cors';
import { rateLimit } from 'express-rate-limit';
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();
const app = express();
const PORT = 3000;
const SECRET_KEY = process.env.CLOUDFLARE_TURNSTILE_SECRET;

const OTPlimiter = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 minutes
    limit: 3, // Limit each IP to 100 requests per `window` (here, per 1 minutes).
    standardHeaders: 'draft-7', // draft-6: `RateLimit-*` headers; draft-7: combined `RateLimit` header
    legacyHeaders: false, // Disable the `X-RateLimit-*` headers.
    // store: ... , // Redis, Memcached, etc. See below.
})

const ResetPassLimiter = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 minutes
    limit: 5, // Limit each IP to 100 requests per `window` (here, per 1 minutes).
    standardHeaders: 'draft-7', // draft-6: `RateLimit-*` headers; draft-7: combined `RateLimit` header
    legacyHeaders: false, // Disable the `X-RateLimit-*` headers.
    // store: ... , // Redis, Memcached, etc. See below.
})

app.use(express.json());
app.use(cors());

const optStore: Record<string, string> = {};

app.get('/', (req, res) => {
    res.json({
        msg: 'On home page'
    })
})

// For OTP generate endpoint
app.post('/generate-otp', OTPlimiter, (req, res) => {
    const { email } = req.body;
    if (!email) {
        return res.status(400).json({
            msg: 'Email is require'
        })
    }
    const otp = Math.floor(100000 + Math.random() * 99999).toString();
    optStore[email] = otp;
    console.log('OTP for email: ', email, 'is ', otp);

    // Send OTP to the email
    res.status(200).json({
        msg: 'OTP is generated and logged',
        otp
    })
})

// For password reset endpoint
app.post('/reset-password', ResetPassLimiter, async (req, res) => {
    const { email, otp, newPassword, token } = req.body;
    if (!email || !otp || !newPassword || !token) {
        return res.status(400).json({
            msg: 'Invalid inputs'
        })
    }
    const response = await axios.post('https://challenges.cloudflare.com/turnstile/v0/siteverify',
        {
            secret: process.env.CLOUDFLARE_TURNSTILE_SECRET,
            response: token,
        },
        {
            headers: {
                "Content-Type": "application/json",
            }
        },

    )
    const result = await response.data;
    if (!result.success) {
        return res.status(404).json({
            msg: "Bot detected",
            result
        })
    }
    if (optStore[email] != otp) {
        return res.status(401).json({
            msg: 'Invalid OTP',
        })
    }
    // Password update logic
    console.log('Password has been reset')
    delete optStore[email];
    return res.json({
        msg: "Password is updated",
    })
})

app.listen(PORT, () => {
    console.log('on port ', PORT)
})